/**
 * \file charm@P@_leg.h
 *
 * Module to work with the fully-normalized associated Legendre functions of
 * the first kind:
 *
 * * defines the ``charm@P@_pnmj`` structure to store Fourier coefficients of 
 *   the Legendre functions,
 *
 * * allocates, initializes and frees ``charm@P@_pnmj``,
 *
 * * computes Fourier coefficients of Legendre functions after Fukushima
 *   (2018).
 *
 *
 * **References**:
 *
 * * Fukushima, T. (2018) Fast computation of sine/cosine series coefficients 
 *   of associated Legendre functions of arbitrary high degree and order
 *
 * * Fukushima T (2014) Numerical computation of spherical harmonics of 
 *   arbitrary degree and order by extending exponent of floating point 
 *   numbers.  Computers and Geosciences 63, 17-21, doi: 
 *   10.1016/j.cageo.2013.10.010
 *
 *
 * @note This documentation is written for double precision version of CHarm.
 *
 * */






#ifndef __CHARM@PC@_LEG_H__
#define __CHARM@PC@_LEG_H__


/* Header files required by this module */
/* ------------------------------------------------------------------------- */
#include <stdio.h>
#include <charm/charm@P@_err.h>
/* ------------------------------------------------------------------------- */






/* ------------------------------------------------------------------------- */
#ifdef __cplusplus
extern "C"
{
#endif
/* ------------------------------------------------------------------------- */






/* Symbolic constants defining the indexing order of the output 3D "pnmj" array 
 * with the Fourier coefficients */
/* ------------------------------------------------------------------------- */
/** Ordering scheme of ``charm@P@_pnmj.pnmj`` (a 3D array). */
enum
{
    /** Order ``m``, degree ``n``, wave-number-related variable ``j``.  Note
     * that ``j`` is not a wave-number ``k``, but is related to it (see
     * ``charm@P@_leg_pnmj_j2k()`` and ``charm@P@_leg_pnmj_k2j()``). */
    CHARM_LEG_PMNJ,


    /** Order ``m``, wave-number-related variable ``j``, degree ``n``. */
    CHARM_LEG_PMJN
};
/* ------------------------------------------------------------------------- */






/* Structure definitions */
/* ------------------------------------------------------------------------- */

/**
 * Structure to store Fourier coefficients of the fully-normalized associated
 * Legendre functions. */
typedef struct
{
    /**
     * Maximum harmonic degree of the Fourier coefficients.
     * */
    unsigned long nmax;


    /** Ordering scheme of the Fourier coefficients in ``charm@P@_pnmj.pnmj``:
     * either ``::CHARM_LEG_PMNJ`` or ``::CHARM_LEG_PMJN``.  */
    int ordering;


    /** Total number of Fourier coefficients \f$P_{nmj}\f$ in
     * ``charm@P@_pnmj.pnmj``.  */
    size_t npnmj;


    /**
     * Fourier coefficients.
     *
     * The structure of ``charm@P@_pnmj.pnmj`` depends on
     * ``charm@P@_pnmj.ordering``, which takes one of two constants:
     * ``::CHARM_LEG_PMNJ`` or ``::CHARM_LEG_PMJN``.
     *
     * @warning ``j`` does *not* represent the wave-number ``k``, but it is
     * closely related to it (see ``charm@P@_leg_pnmj_j2k()`` and
     * ``charm@P@_leg_pnmj_k2j()``).
     *
     * * Structure of ``charm@P@_pnmj.pnmj`` when ``charm@P@_pnmj.ordering`` is
     *   ``::CHARM_LEG_PMNJ``:
     *
     *   The first dimension of ``charm@P@_pnmj.pnmj`` is related to harmonic
     *   orders, the second dimension to harmonic degrees and the third
     *   dimension to wave-numbers.  Importantly, ``charm@P@_pnmj.pnmj`` is
     *   *not* a regular 3D array, as the number of elements in the second and
     *   the third dimension varies based on the first dimension.  The
     *   following scheme is applied:
     *
     *   * each ``charm@P@_pnmj.pnmj[m]``, with ``m = 0``, ``1``, ...,
     *   ``nmax``, has ``charm@P@_pnmj.nmax - m + 1`` elements for harmonic
     *   degrees ``n = m``, ``m + 1``, ..., ``charm@P@_pnmj.nmax``
     *   (respectively),
     *
     *   * each ``charm@P@_pnmj.pnmj[m][n - m]`` has ``floor(n / 2) + 1``
     *     elements for wave-numbers.
     *
     *   The Fourier coefficient \f$P_{nmj}\f$, using the notation from
     *   Eq. (62) of Fukushima (2018), can therefore be access as follows
     *   ``charm@P@_pnmj.pnmj[m][n - m][j]``.
     *
     *
     * * Structure of ``charm@P@_pnmj.pnmj`` when ``charm@P@_pnmj.ordering`` is
     *   ``::CHARM_LEG_PMJN``:
     *
     *   The first dimension of ``charm@P@_pnmj.pnmj`` is related to harmonic
     *   orders, the second dimension to wave-numbers and the third dimension
     *   to harmonic degrees.  Importantly, ``charm@P@_pnmj.pnmj`` is *not*
     *   a regular 3D array, as the number of elements in the third dimension
     *   varies based on the ``m`` and ``j`` variables.  The following scheme
     *   is applied:
     *
     *   * each ``charm@P@_pnmj.pnmj[m]``, with ``m = 0``, ``1``, ...,
     *     ``charm@P@_pnmj.nmax``, has ``floor(charm@P@_pnmj.nmax / 2) + 1``
     *     elements for wave-number-related variable ``j = 0``, ``1``, ...,
     *     ``floor(charm@P@_pnmj.nmax / 2)``,
     *
     *   * each ``charm@P@_pnmj.pnmj[m][j]`` has
     *   ``(charm@P@_pnmj.nmax - CHARM_MAX(2 * j, m) + 1)`` elements for
     *   harmonic degrees ``CHARM_MAX(2 * j, m)``, ``CHARM_MAX(2 * j, m) + 1``,
     *   ..., ``charm@P@_pnmj.nmax``.
     *
     *   The Fourier coefficient \f$P_{nmj}\f$, using the notation from 
     *   Eq. (62) of Fukushima (2018), can therefore be access as follows
     *   ``charm@P@_pnmj.pnmj[m][j][n - CHARM_MAX(m, 2 * j)]``.
     *
     * If ``charm@P@_pnmj.ordering`` is ``::CHARM_LEG_PMNJ``, the following
     * loop order is recommended for fast sequential access to the
     * \f$P_{nmj}\f$ coefficients: harmonic order ``m``, harmonic degree ``n``
     * and wave-number-related variable ``j``; e.g.:
     *
     * \verbatim embed:rst:leading-asterisk
     *  .. code-block:: c
     *
     *      charm@P@_pnmj *pnmj = charm@P@_leg_pnmj_calloc(nmax, CHARM_LEG_PMNJ)
     *      for (unsigned long m = 0; m <= nmax; m++)
     *          for (unsigned long n = m; n <= nmax; n++)
     *              for (unsigned long j = 0; j <= (n / 2); j++)
     *                  pnmj->pnmj[m][n - m][j];
     *
     * \endverbatim
     *
     * If ``charm@P@_pnmj.ordering`` is ``::CHARM_LEG_PMJN``, the
     * recommended loop order is:
     *
     * \verbatim embed:rst:leading-asterisk
     *  .. code-block:: c
     *
     *      charm@P@_pnmj *pnmj = charm@P@_leg_pnmj_calloc(nmax, CHARM_LEG_PMJN)
     *      for (unsigned long m = 0; m <= nmax; m++)
     *          for (unsigned long j = 0; j <= (nmax / 2); j++)
     *              for (unsigned long n = CHARM_MAX(m, 2 * j); n <= nmax; n++)
     *                  pnmj->pnmj[m][j][n - CHARM_MAX(m, 2 * j)];
     *
     * \endverbatim
     *
     *
     * The coefficients (elements) in ``charm@P@_pnmj.pnmj`` are stored in
     * a single *contiguous* block of memory.  */
    @RDT@ ***pnmj;
} charm@P@_pnmj;
/* ------------------------------------------------------------------------- */






/* Function prototypes */
/* ------------------------------------------------------------------------- */


/* ......................................................................... */
/** @name Allocate and free the charm@P@_pnmj structure
 *
 * Functions to allocate and free ``charm@P@_pnmj``.
 *
 * @{
 * */


/** @brief Allocates Fourier coefficients of the fully-normalized associated
 * Legendre functions up to harmonic degree ``nmax`` using the ordering scheme
 * ``ordering``.  The Fourier coefficients are uninitialized, so their values
 * are undefined.
 *
 * @details ``ordering`` can be set either to ``::CHARM_LEG_PMNJ`` or
 * ``::CHARM_LEG_PMJN``.
 *
 * @warning The ``charm@P@_pnmj`` structure created by this function must be
 * deallocated by calling ``charm@P@_leg_pnmj_free()``.  The usual deallocation
 * ``free`` will *not* deallocate the memory and will lead to memory leaks.
 *
 * @returns On success, returned is a pointer to the ``charm@P@_pnmj``
 * structure.  On error, ``NULL`` is returned.
 *
 * */
CHARM_EXTERN charm@P@_pnmj * CHARM_CDECL
                            charm@P@_leg_pnmj_malloc(unsigned long nmax,
                                                     int ordering);






/** @brief The same as ``charm@P@_leg_pnmj_malloc()`` but all Fourier
 * coefficients are initialized to zero. */
CHARM_EXTERN charm@P@_pnmj * CHARM_CDECL
                            charm@P@_leg_pnmj_calloc(unsigned long nmax,
                                                     int ordering);






/** @brief Frees the memory associated with ``pnmj``.  No operation is
 * performed if ``pnmj`` is ``NULL``.  */
CHARM_EXTERN void CHARM_CDECL charm@P@_leg_pnmj_free(charm@P@_pnmj *pnmj);


/**
 * @}
 * */






/* ......................................................................... */
/** @name Fourier coefficients of Legendre functions
 *
 * Functions to compute the Fourier coefficients of Legendre functions and some
 * associated useful functions.
 *
 * @{
 * */


/** @brief Computes Fourier coefficients of fully normalized associated
 * Legendre functions up to degree ``nmax`` and saves them to ``pnmj``.  The
 * structure of ``pnmj->pnmj`` depends on ``pnmj->ordering``. If ``nmax
 * < pnmj->nmax``, all Fourier coefficients in ``pnmj->pnmj`` beyond ``nmax``
 * are set to zero.  In case of failure, the error is written to ``err``.
 *
 * @details The algorithm of Fukushima (2018) is employed.
 *
 *
 * **References**:
 *
 * * Fukushima, T. (2018) Fast computation of sine/cosine series coefficients 
 *   of associated Legendre functions of arbitrary high degree and order.
 *
 * */
CHARM_EXTERN void CHARM_CDECL
                  charm@P@_leg_pnmj_coeffs(charm@P@_pnmj *pnmj, 
                                           unsigned long nmax,
                                           charm@P@_err *err);






/** @brief Transforms a wave-number-related variable ``j`` to the wave-number
 * ``k`` of a Fourier coefficient of fully-normalized associated Legendre
 * function of degree ``n`` (see Section C.1 of Fukushima, 2018),
 *
 * \verbatim embed:rst:leading-asterisk
 *  .. math::
 *
 *      k = \left[ 1 - (-1)^n \right] / 2 + 2 j{.}
 *
 * \endverbatim
 *
 * @param[in] n Harmonic degree of the Legendre function.
 * @param[in] j Variable related to the wave-number ``k``.
 *
 * @returns Wave-number ``k`` of the Fourier coefficient of a Legendre
 * function.  */
CHARM_EXTERN unsigned long CHARM_CDECL
                           charm@P@_leg_pnmj_j2k(unsigned long n,
                                                 unsigned long j);






/** @brief Transforms a wave-number ``k`` of a Fourier coefficient of
 * fully-normalized associated Legendre function to the wave-number-related
 * variable ``j`` (see Section C.1 of Fukushima, 2018),
 *
 * \verbatim embed:rst:leading-asterisk
 *  .. math::
 *
 *      j = \left[ k / 2 \right]_{\mathrm{floor}}{.}
 *
 * \endverbatim
 *
 * @param[in] k Wave-number of a Fourier coefficients of Legendre function.
 *
 * @returns Wave-number-related variable ``j`` of the Fourier coefficient of
 * a Legendre function.  */
CHARM_EXTERN unsigned long CHARM_CDECL charm@P@_leg_pnmj_k2j(unsigned long k);


/**
 * @}
 * */


/* ------------------------------------------------------------------------- */
#ifdef __cplusplus
}
#endif
/* ------------------------------------------------------------------------- */


#endif
