/**
 * \file charm@P@_crd.h
 *
 * Module to work with the coordinates of evaluation points/cells:
 *
 * * defines ``charm@P@_point`` and ``charm@P@_cell`` structures,
 *
 * * allocates, initializes and frees ``charm@P@_point`` and ``charm@P@_cell``,
 *
 * * computes ``charm@P@_point`` for a few pre-defined grid types.
 *
 * @note  This documentation is written for double precision version of CHarm.
 *
 * **References**:
 *
 * * Sneeuw, N. (1994) Global spherical harmonic analysis by least-squares and 
 *   numerical quadrature methods in historical perspective. Geophysical 
 *   Journal International 118:707-716
 *
 * * Driscoll, J. R., Healy, D. M. (1994) Computing Fourier transforms and 
 *   convolutions on the 2-sphere. Advances in Applied Mathematics 15:202-250
 *
 * * Wieczorek, M. A., Meschede, M. (2018) SHTools: Tools for Working with 
 *   Spherical Harmonics.  Geochemistry, Geophysics, Geosystems 19:2574-2592
 *
 * */






#ifndef __CHARM@PC@_CRD_H__
#define __CHARM@PC@_CRD_H__


/* Header files required by this module */
/* ------------------------------------------------------------------------- */
#include <stdio.h>
#include <charm/charm@P@_err.h>
/* ------------------------------------------------------------------------- */






/* ------------------------------------------------------------------------- */
#ifdef __cplusplus
extern "C"
{
#endif
/* ------------------------------------------------------------------------- */






/* ------------------------------------------------------------------------- */
/** Supported values of ``type`` in ``charm@P@_point`` (``CHARM_CRD_POINT_*``)
 * and in ``charm@P@_cell`` (``CHARM_CRD_CELL_*``). */
enum
{
    /** Custom grid of cells. */
    CHARM_CRD_CELL_GRID = -2,


    /** Scattered cells. */
    CHARM_CRD_CELL_SCATTERED,


    /** Scattered points. */
    CHARM_CRD_POINT_SCATTERED = 1,


    /** Custom point grid. */
    CHARM_CRD_POINT_GRID,


    /** Gauss-Legendre point grid. */
    CHARM_CRD_POINT_GRID_GL,


    /** Driscoll-Healy point grid as defined by Driscoll and Healy (1994)
     * (non-equiangular). */
    CHARM_CRD_POINT_GRID_DH1,


    /** The equiangular modification of the Driscoll-Healy point grid after
     * Wieczorek and Meschede  (2018). */
    CHARM_CRD_POINT_GRID_DH2
};
/* ------------------------------------------------------------------------- */






/* ------------------------------------------------------------------------- */
/** Structure to store evaluation points. */
typedef struct
{
    /** Defines whether the points are organized as a grid or are scattered.
     *
     * ``type`` takes the following symbolic constants: 
     *
     * * ``CHARM_CRD_POINT_SCATTERED`` for user-defined scattered points,
     *
     * * ``CHARM_CRD_POINT_GRID`` for a user-defined grid,
     *
     * * ``CHARM_CRD_POINT_GRID_GL`` for the Gauss-Legendre grid (Sneeuw,
     *   1994) with ``nmax + 1`` latitudes and ``2 * nmax + 2`` longitudes
     *   (``nmax`` is maximum harmonic degree),
     *
     * * ``CHARM_CRD_POINT_GRID_DH1`` for the non-equiangular Driscoll-Healy
     *   grid as defined by Driscoll and Healy (1994) with ``2 * nmax + 2``
     *   latitudes and ``2 * nmax + 2`` longitudes, and
     *
     * * ``CHARM_CRD_POINT_GRID_DH2`` for an equiangular modification of the
     *   Driscoll-Healy grid (Wieczorek and Meschede, 2018) with
     *   ``2 * nmax + 2`` latitudes and ``4 * nmax + 4`` longitudes.  */
    int type;


    /**
     * Number of latitudes.
     *
     * * For **scattered** points (``type == CHARM_CRD_POINT_SCATTERED``),
     *   ``nlat`` represents the total number of points in the
     *   ``charm@P@_point`` structure.
     *
     * * For **grids** (``type == CHARM_CRD_POINT_GRID*``), ``nlat`` stands
     *   for the numbers of points in the latitudinal direction of the grid.
     *   */
    size_t nlat;


    /**
     * Number of longitudes.
     *
     * * For **scattered** points, ``nlon`` represents the total number of
     *   points in the ``charm@P@_point`` structure. ``nlon`` must be equal to
     *   ``nlat``.  The total number of points is ``nlat == nlon``.
     *
     * * For **grids**, ``nlon`` stands for the numbers of points in the
     *   longitudinal direction of the grid.  ``nlat`` and ``nlon`` may be
     *   different.  The total number of grid points is ``nlat * nlon``.  */
    size_t nlon;


    /** Pointer to an array of latitudes in radians.  ``nlat`` array elements
     * are associated with ``lat``. */
    @RDT@ *lat;


    /** Pointer to an array of longitudes in radians.  ``nlon`` array elements
     * are associated with ``lon``. */
    @RDT@ *lon;


    /** Pointer to an array of spherical radii in metres.  ``nlat`` array
     * elements are associated with ``r``. */
    @RDT@ *r;


    /**
     * Pointer to an array of integration weights on the *unit* sphere. The
     * pointer is used (i.e. is not ``NULL``) only for ``charm@P@_point``
     * structures returned by the ``charm@P@_crd_point_gl()``,
     * ``charm@P@_crd_point_dh1()`` and ``charm@P@_crd_point_dh2()`` functions,
     * that is, if
     *
     * - ``type == CHARM_CRD_POINT_GRID_GL``, 
     *
     * - ``type == CHARM_CRD_POINT_GRID_DH1``, or 
     *
     * - ``type == CHARM_CRD_POINT_GRID_DH2``.
     *
     * ``nlat`` array elements are associated with ``w``.
     *
     * For all other values of ``type``, ``w`` is ``NULL`` and is never used.
     * */
    @RDT@ *w;


    /** If ``1``, the memory associated with ``lat``, ``lon``, ``r`` and ``w``
     * was allocated by CHarm, so ``charm@P@_crd_point_free()`` deallocates it.
     * If ``owner`` is ``0``, the memory associated with these arrays was
     * allocated outside CHarm, so ``charm@P@_crd_point_free()`` does *not*
     * deallocate it (the user allocated this memory outside CHarm, so the user
     * should free the memory outside CHarm as well). */
    _Bool owner;
} charm@P@_point;






/** Structure to store evaluation cells. */
typedef struct
{
    /** Defines whether the cells are organized as a regular grid or are
     * scattered.
     *
     * ``type`` takes the following symbolic constants: 
     *
     * * ``CHARM_CRD_CELL_GRID`` for a user-defined grid of cells,
     *
     * * ``CHARM_CRD_CELL_SCATTERED`` for a user-defined set of scattered 
     *   cells. */
    int type;


    /**
     * Number of latitudes.
     *
     * * For **scattered** cells (``type`` set to
     *   ``CHARM_CRD_CELL_SCATTERED``), ``nlat`` represents the total number
     *   of cells in the ``charm@P@_cell`` structure.
     *
     * * For **grids** (``type`` set to ``CHARM_CRD_CELL_GRID``), ``nlat``
     *   stands for the numbers of cells in the latitudinal direction of the
     *   grid.  */
    size_t nlat;


    /**
     * Number of longitudes.
     *
     * * For **scattered** cells, ``nlon`` represents the total number of cells
     *   in the ``charm@P@_cell`` structure. ``nlon`` must be equal to
     *   ``nlat``.  The total number of cells is equal to ``nlat == nlon``.
     *
     * * For **grids**, ``nlon`` stands for the numbers of cells in the
     *   longitudinal direction of the grid.  ``nlat`` and ``nlon`` may be
     *   different.  The total number of grid cells is ``nlat * nlon``.  */
    size_t nlon;


    /** Pointer to an array of minimum cell latitudes in radians.  ``nlat``
     * array elements are associated with ``latmin`` */
    @RDT@ *latmin;


    /** Pointer to an array of maximum cell latitudes in radians.  ``nlat``
     * array elements are associated with ``latmax`` */
    @RDT@ *latmax;


    /** Pointer to an array of minimum cell longitudes in radians. ``nlon``
     * array elements are associated with ``lonmin`` */
    @RDT@ *lonmin;


    /** Pointer to an array of maximum cell longitudes in radians. ``nlon``
     * array elements are associated with ``lonmax`` */
    @RDT@ *lonmax;


    /** Pointer to an array of spherical radii in metres. ``nlat`` array
     * elements are associated with ``r``.  */
    @RDT@ *r;


    /** If ``1``, the memory associated with ``latmin``, ``latmax``,
     * ``lonmin``, ``lonmax`` and ``r`` was allocated by CHarm, so
     * ``charm@P@_crd_cell_free()`` deallocates it.  If ``owner`` is ``0``, the
     * memory associated with these arrays was allocated outside CHarm, so
     * ``charm@P@_crd_cell_free()`` does *not* deallocate it (the user
     * allocated this memory outside CHarm, so the user should free the memory
     * outside CHarm as well). */
    _Bool owner;
} charm@P@_cell;
/* ------------------------------------------------------------------------- */






/* Function prototypes */
/* ------------------------------------------------------------------------- */

/** Returns a pointer to the ``charm@P@_point`` structure that is created for
 * a given ``type`` with ``nlat`` latitudes, ``nlon`` longitudes and ``nlat``
 * spherical radii.  If ``type`` is one of ``CHARM_CRD_POINT_GRID_*``, memory
 * for ``nlat`` integration weights is allocated in addition.  The memory of
 * all arrays is uninitialized.
 *
 * Valid values of ``type`` are all symbolic constants ``CHARM_CRD_POINT_*``.
 *
 * On success, returned is a pointer to the ``charm@P@_point`` structure.  On
 * error, ``NULL`` is returned.  Errors include memory allocation failures and
 * incorrect input arguments (e.g., ``nlat < 1``, ``nlon < 1`` or unsupported
 * value of ``type``).
 *
 * \verbatim embed:rst:leading-asterisk
 *  .. note::
 *
 *      * For ``charm@P@_point *pnt`` returned by this function with ``type``
 *        being equal to one of ``CHARM_CRD_POINT_GRID*``, the coordinates of
 *        the grid point on the ``i``-th latitude parallel and the ``j``-th
 *        meridian have to be accessed as
 *
 *        - ``pnt->lat[i]`` for the grid latitude,
 *
 *        - ``pnt->lon[j]`` for the grid longitude, and
 *
 *        - ``pnt->r[i]`` for the spherical radii
 *
 *        with ``i = 0, 1, ..., nlat - 1`` and ``j = 0, 1, ..., nlon - 1``.
 *
 *      * For ``type`` set to ``CHARM_CRD_POINT_SCATTERED``, the coordinates
 *        of the ``i``-th point have to be accessed as
 *
 *        - ``pnt->lat[i]`` for the grid latitude,
 *
 *        - ``pnt->lon[i]`` for the grid longitude, and
 *
 *        - ``pnt->r[i]`` for the spherical radii
 *
 *        with ``i = 0, 1, ..., nlat - 1``, ``nlat == nlon``.
 *
 * \endverbatim
 *
 * @warning The structure returned *must* be deallocated by calling
 * ``charm@P@_crd_point_free()``.  The usual deallocation with ``free`` will
 * lead to memory leaks.
 *
 * */
extern charm@P@_point *charm@P@_crd_point_malloc(int type,
                                                 size_t nlat,
                                                 size_t nlon);






/** The same as ``charm@P@_crd_point_malloc()`` but the memory of all arrays is
 * initialized to zero. */
extern charm@P@_point *charm@P@_crd_point_calloc(int type,
                                                 size_t nlat,
                                                 size_t nlon);






/** Returns a pointer to the ``charm@P@_point`` structure that is created for
 * a given ``type`` from user-defined data (shallow copy).  Accepted values of
 * ``type`` are ``CHARM_CRD_POINT_*``.
 *
 * * If ``type == CHARM_CRD_POINT_SCATTERED``,
 *
 *   - ``nlat`` must be equal to ``nlon`` and
 *
 *   - each of ``lat``, ``lon`` and ``r`` must have access to ``nlat``
 *     elements.
 *
 * * If ``type == CHARM_CRD_POINT_GRID*``,
 *
 *   - ``lat`` must have access to ``nlat`` elements,
 *
 *   - ``lon`` must have access to ``nlon`` elements, and
 *
 *   - ``r`` must have access to ``nlat`` elements.
 *
 * On success, returned is a pointer to the ``charm@P@_point`` structure.  On
 * error, ``NULL`` is returned.  Errors include memory allocation failures and
 * incorrect input arguments (e.g., ``nlat < 1``, ``nlon < 1`` or unsupported
 * value of ``type``).
 *
 * @note See ``charm@P@_crd_point_malloc()`` to find out how to access the
 * coordinates stored in the returned ``charm@P@_point`` structure.
 *
 * @note See ``charm@P@_shc_init()`` for the rationale behind the shallow
 * copies of input arrays ``lat``, ``lon`` and ``r``.  The memory of these
 * arrays must be treated in the same fashion as shown therein with the ``c``
 * and ``s`` arrays.
 *
 * @warning The ``charm@P@_point`` structure created by this function *must* be
 * deallocated using ``charm@P@_crd_point_free()``.  The usual deallocation
 * with ``free`` will lead to memory leaks.
 *
 * */
extern charm@P@_point *charm@P@_crd_point_init(int type,
                                               size_t nlat,
                                               size_t nlon,
                                               @RDT@ *lat,
                                               @RDT@ *lon,
                                               @RDT@ *r);






/** Frees the memory associated with ``pnt``.  No operation is performed if
 * ``pnt`` is ``NULL``.
 * 
 * If ``pnt->owner`` is ``1``, the function releases all the memory that is
 * associated with ``pnt``, including that of its array members.  If
 * ``pnt->owner`` is ``0``, the arrays are not released from the memory,
 * because they were not allocated by CHarm.
 *
 * */
extern void charm@P@_crd_point_free(charm@P@_point *pnt);






/** Prepares a ``charm@P@_point`` structure of the Gauss-Legendre grid that is
 * associated with the maximum harmonic degree ``nmax`` (Sneeuw, 1994) and
 * resides on the sphere with the radius ``r``. The integration weights are
 * computed on the *unit* sphere.
 *
 * On success, returned is a pointer to the ``charm@P@_point`` structure.  On
 * error, ``NULL`` is returned.  In addition to the memory allocation failure,
 * the error may be due to the exceeded maximum number of iterations to compute
 * the latitudes or due to the overflow problem.  The latter may happen in
 * *single* precision if ``nmax`` is larger than ``7200`` or so.  The overflow
 * check is *not* performed if your ``math.h`` system header file does not
 * define the ``isfinite`` macro or if the macro is present, but it does not
 * work properly with the specified floating point data type (particularly
 * ``__float128``).  You may want to inspect the output of the
 * ``charm_misc_print_version`` function to see if CHarm utilizes the
 * ``isfinite`` macro.
 *
 * Loops are parallelized using OpenMP.
 *
 * \verbatim embed:rst:leading-asterisk
 *      .. note::
 *
 *          The Gauss-Legendre grid is non-equiangular in terms of the 
 *          latitude.  The longitudinal step is constant.
 *
 * \endverbatim
 *
 * */
extern charm@P@_point *charm@P@_crd_point_gl(unsigned long nmax,
                                             @RDT@ r);






/** Prepares a ``charm@P@_point`` structure of the non-equiangular
 * Driscoll-Healy grid (as defined by Driscoll and Healy, 1994) that is
 * associated with the maximum spherical harmonic degree ``nmax`` and resides
 * on the sphere with the radius ``r``.  The integration weights are computed
 * on the *unit* sphere.
 *
 * On success, returned is a pointer to the ``charm@P@_point`` structure.  On
 * error, ``NULL`` is returned.
 *
 * Loops are parallelized using OpenMP. */
extern charm@P@_point *charm@P@_crd_point_dh1(unsigned long nmax,
                                              @RDT@ r);






/** The same as ``charm@P@_crd_point_dh1()`` but for an equiangular
 * modification of the Driscoll-Healy grid after Wieczorek and Meschede
 * (2018).  */
extern charm@P@_point *charm@P@_crd_point_dh2(unsigned long nmax,
                                              @RDT@ r);






/** Returns a pointer to the ``charm@P@_cell`` structure that is created for
 * a given ``type`` with ``nlat`` minimum and maximum latitudes, ``nlon``
 * minimum and maximum longitudes and ``nlat`` spherical radii and.  The memory
 * of all array members of ``charm@P@_cell`` is uninitialized.
 *
 * Valid values of ``type`` are all symbolic constants ``CHARM_CRD_CELL_*``.
 *
 * On success, returned is a pointer to the ``charm@P@_cell`` structure.  On
 * error, ``NULL`` is returned.  Errors include memory allocation failures and
 * incorrect input arguments (e.g., ``nlat < 1``, ``nlon < 1`` or unsupported
 * value of ``type``).
 *
 * \verbatim embed:rst:leading-asterisk
 *  .. note::
 *
 *      * For ``charm@P@_cell *cell`` returned by this function with ``type``
 *        being equal to ``CHARM_CRD_CELL_GRID*``, the coordinates of the grid
 *        cell on the ``i``-th latitude parallel and the ``j``-th meridian have
 *        to be accessed as
 *
 *        - ``cell->latmin[i]`` for the minimum cell latitude,
 *
 *        - ``cell->latmax[i]`` for the maximum cell latitude,
 *
 *        - ``cell->lonmin[j]`` for the minimum cell longitude,
 *
 *        - ``cell->lonmax[j]`` for the maximum cell longitude,
 *
 *        - ``cell->r[i]`` for the spherical radii
 *
 *        with ``i = 0, 1, ..., nlat - 1`` and ``j = 0, 1, ..., nlon - 1``.
 *
 *      * For ``type`` set to ``CHARM_CRD_CELL_SCATTERED``, the coordinates of
 *        the ``i``-th cell have to be accessed as
 *
 *        - ``cell->latmin[i]`` for the minimum cell latitude,
 *
 *        - ``cell->latmax[i]`` for the maximum cell latitude,
 *
 *        - ``cell->lonmin[i]`` for the minimum cell longitude,
 *
 *        - ``cell->lonmax[i]`` for the maximum cell longitude,
 *
 *        - ``cell->r[i]`` for the spherical radii
 *
 *        with ``i = 0, 1, ..., nlat - 1``, ``nlat == nlon``.
 *
 * \endverbatim
 *
 * @warning The structure returned *must* be deallocated by calling
 * ``charm@P@_crd_cell_free()``.  The usual deallocation with ``free`` will
 * lead to memory leaks.
 *
 * */
extern charm@P@_cell *charm@P@_crd_cell_malloc(int type,
                                               size_t nlat,
                                               size_t nlon);






/** The same as ``charm@P@_crd_cell_malloc()`` but the memory of all arrays is
 * initialized to zero. */
extern charm@P@_cell *charm@P@_crd_cell_calloc(int type,
                                               size_t nlat,
                                               size_t nlon);






/** Returns a pointer to the ``charm@P@_cell`` structure that is created for
 * a given ``type`` from user-defined data (shallow copy).  Accepted values of
 * ``type`` are ``CHARM_CRD_CELL_*``.
 *
 * * If ``type == CHARM_CRD_CELL_SCATTERED``,
 *
 *   - ``nlat`` must be equal to ``nlon`` and
 *
 *   - each of ``latmin``, ``latmax``, ``lonmin``, ``lonmax`` and ``r`` must
 *     have access to ``nlat`` elements.
 *
 * * If ``type == CHARM_CRD_CELL_GRID``,
 *
 *   - ``latmin`` and ``latmax`` must each have access to ``nlat`` elements,
 *
 *   - ``lonmin`` and ``lonmax`` must each have access to ``nlon`` elements,
 *
 *   - ``r`` must have access to ``nlat`` elements.
 *
 * On success, returned is a pointer to the ``charm@P@_cell`` structure.  On
 * error, ``NULL`` is returned.  Errors include memory allocation failures and
 * incorrect input arguments (e.g., ``nlat < 1``, ``nlon < 1`` or unsupported
 * value of ``type``).
 *
 * @note See ``charm@P@_crd_cell_malloc()`` to find out how to access the
 * coordinates stored in the returned ``charm@P@_cell`` structure.
 *
 * @note See ``charm@P@_shc_init()`` for the rationale behind the shallow
 * copies of input arrays ``latmin``, ``latmax``, ``lonmin``, ``lonmax`` and
 * ``r``.  The memory of these arrays must be treated in the same fashion as
 * shown therein with the ``c`` and ``s`` arrays.
 *
 * @warning The ``charm@P@_cell`` structure created by this function *must* be
 * deallocated using ``charm@P@_crd_cell_free()``.  The usual deallocation with
 * ``free`` will lead to memory leaks.
 *
 * */
extern charm@P@_cell *charm@P@_crd_cell_init(int type,
                                             size_t nlat,
                                             size_t nlon,
                                             @RDT@ *latmin,
                                             @RDT@ *latmax,
                                             @RDT@ *lonmin,
                                             @RDT@ *lonmax,
                                             @RDT@ *r);






/** Frees the memory associated with ``cell``.  No operation is performed if
 * ``cell`` is ``NULL``.
 * 
 * If ``cell->owner`` is ``1``, the function releases all the memory that is
 * associated with ``cell``, including that of its array members.  If
 * ``cell->owner`` is ``0``, the arrays are not released from the memory,
 * because they were not allocated by CHarm.  */
extern void charm@P@_crd_cell_free(charm@P@_cell *cell);
/* ------------------------------------------------------------------------- */






/* ------------------------------------------------------------------------- */
#ifdef __cplusplus
}
#endif
/* ------------------------------------------------------------------------- */


#endif
